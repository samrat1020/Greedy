#include <bits/stdc++.h>
using namespace std;

// Structure for storing starting time, finishing time and position of meeting.
struct meeting 
{
    int start; 
    int end;
    int pos;
};

// Comparator function which can compare 
// the second element of structure used to 
// sort pairs in increasing order of second value. 
bool comparator(struct meeting m1, meeting m2) 
{
    return (m1.end < m2.end) ;
}

// Fuction for finding maximum meeting in one room
void maxMeeting(int s[], int f[], int n)
{
    struct meeting meet[n];
    for(int i = 0; i < n; i++) {
        meet[i].start = s[i]; // starting time of meeting i.
        meet[i].end = f[i];   // finishing time of meeting i
        meet[i].pos = i+1;  // Original position/index of meeting
    }
    
    // sorting of meeting according to their finish time.
    sort(meet, meet+n, comparator);
    
    // vector for storing selected meeting.
    vector<int> m;
    
    // initially select first meeting.
    m.push_back(meet[0].pos);
    
    // time_limit to check whether new meeting can be conducted or not.
    int time_limit = meet[0].end;
    
    // check for all meeting whether it can be selected or not.
    for(int i = 1; i < n; i++) {
        if(meet[i].start >= time_limit) {
            m.push_back(meet[i].pos); // push selected meeting to vector
            time_limit = meet[i].end; // update time limit.
        }
    }
    
    // print final selected meetings.
    for(int i  = 0; i < m.size(); i++) {
        cout << m[i] << " ";
    }
}

int main() {
    int n;
    cin >> n;
    int s[n]; // starting time.
    int f[n]; // Finish time.
    for(int i = 0; i < n; i++) {
        cin >> s[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> f[i];
    }
    
    maxMeeting(s, f, n);
    cout << endl;

	return 0;
}
